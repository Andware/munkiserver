== munkiserver

munkiserver is the (you guessed it) server-side component to munki, a project developed by Greg Neagle (http://code.google.com/p/munki/).  munki allows large scale manage software deployment on OS X computers in a way that was never possible (well, not for free anyway).  To simplify and extend the functionality of munki, munkiserver offers a GUI that allows a one-to-one modeling for a computer's software.

== Installing and starting

- Install rvm (ruby version manager) system wide (great article found here: http://greg.nokes.name/2010/03/26/rooting-with-rvm/)
- Install Ruby 1.9.1
	- `sudo rvm install 1.9.1`
	- Close and reopen your terminal
- Install Rails 3 beta
	`rvm 1.9.1`
	`sudo gem install rails -v 3.0.0.beta3`
- Clone the repo
	Install GIT w/ MacPorts, or whatever
	`git clone git://github.com/jraine/munkiserver.git`
- Initialize the app
	`cd /path/to/munkiserver`
	`bundle install`
	`rake db:migrate` or `rake db:migrate production` (for production)
	`rake bootstrap:all` or `rake db:migrate production` (for production)
- Fire up the server
	`rails s` (development on port 3000)
	`sudo rails s -p 80 production` (production on port 80)
	
== Why you should use munkiserver

1. GUI == a happy admin

munki is an amazing tool for software distribution on OS X, however, managing the server component can be tedious.  munkiserver aims to replace text editing with a point-and-click workflow.  No need to manually edit a plist file, or regenerate catalogs after making a change.

2. Macro and micro management

munkiserver prescribes paradigms for macro and micro management.  munkiserver expects you to create a computer object for every single computer, either manually or straight from ARD.  This is handy if you have a user who needs one set of applications and another user who needs a completely different set of applications.  Alternately, if you need to push a piece of software to a group of machines, simply add that package to the computer group.  Have a suite of packages that you're constantly pushing out together?  Group them together in a bundle and assign those to a computer, computer group, or even another bundle.

3. Version Tracking and Updates

For some cases, such as a drag-and-drop application install, munkiserver provides version tracking that notifies you if an application you are managing has an update.  It even allows you to automagically add that package to your munkiserver with one click.
	
== First login

A user is created by the bootstrapper with the username 'default' and the password 'password'.  Use this after setting up the server.

== State of the code

This code is relatively untested and currently relies on a sqlite3 database backend.  I wouldn't recommend putting this into production quite yet.  I do recommend you install it on a server (or workstation, for that matter) and test it on one or two computers.  Munki is a gentle manager and can be added and removed very easily to any computer.

A production-ready version of the code should be available just as soon as I can test it thoroughly and put it into production on our campus.
	
== Other comments

- Right now, Munki environments do not mingle.  This means that if a computer is "Production" and a package is "Staging", you cannot assign the package to the computer.
- All packages start in the staging environment.
- After adding a computer object, you can download a ManagedInstalls.plist file that contains all the appropriate settings for that particular client.  Do to this, click on the "Computers" link and then click "Client Prefs" for the desired computer record.
- One user is made during deployment (`rake bootstrap:user`).  Username is 'default', password is 'password'.  Login with this user first.